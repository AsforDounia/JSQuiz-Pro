
<pre>
  <!-- theme -->
   <%= theme ? JSON.stringify(currentQuestion, null, 2) : null %>
</pre>
    <!-- Quiz Content -->
    <main class="quiz-main-content">
      <div class="container">
        <% if (hasData && questions && questions.length > 0) { %>
        <div class="quiz-content-wrapper">
          <!-- Question Card -->
          <div class="quiz-question-card">
            <div class="quiz-question-layout">
              <div class="quiz-question-content">
                <span class="quiz-badge"
                  >Question <span id="questionNumber"><%= currentQuestion + 1 %></span></span
                >
                <h2 id="questionText" class="quiz-question-title">
                  <%= questions[currentQuestion].question %>
                </h2>
              </div>
            </div>
          </div>

          <!-- Answer Options -->
          <div id="answerOptions" class="quiz-options-grid">
            <% 
            let options = questions[currentQuestion].options;
            if (typeof options === 'string') {
              try {
                options = JSON.parse(options);
              } catch (e) {
                options = [];
              }
            }
            %>
            <% if (Array.isArray(options) && options.length > 0) { %>
<% options.forEach((option, index) => { %>
  <div class="quiz-option-card" data-index="<%= index %>" onclick="selectAnswer(<%= index %>)">
    <div class="quiz-option-content">
      <div class="quiz-option-indicator"><%= String.fromCharCode(65 + index) %></div>
      <span class="quiz-option-text"><%= option %></span>
    </div>
  </div>
<% }); %>
            <% } %>
          </div>

          <!-- Next Button -->
          <div class="quiz-button-container actions justify-between">
            <button
              id="sbtBtn"
              class="btn btn-primary btn-large button"
              onclick="handleSubmit()"
              disabled
            >
              Submit Question
            </button>
            <button
              id="nextBtn"
              class="btn btn-primary btn-large"
              onclick="handleNext()"
            >
              Next Question
            </button>
          </div>
        </div>
        <% } else { %>
        <!-- No Data Section -->
        <div class="no-quiz-container">
          <div class="no-quiz-content">
            <div class="no-quiz-icon">
              <svg
                width="80"
                height="80"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="1.5"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <circle cx="12" cy="12" r="10" />
                <path d="M12 8v4" />
                <path d="M12 16h.01" />
              </svg>
            </div>
            <h3 class="no-quiz-title">Quiz Non Disponible</h3>
            <p class="no-quiz-description">
              Désolé, le quiz "<%= quizType %>" n'a pas encore de questions disponibles.
              <br />
              Veuillez réessayer plus tard ou choisir un autre quiz.
            </p>
            <div class="no-quiz-actions">
              <a href="/quiz/list" class="btn btn-primary">
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path d="M19 12H5" />
                  <polyline points="12,19 5,12 12,5" />
                </svg>
                Retour aux Quiz
              </a>
              <a href="/users/dashboard" class="btn btn-secondary">
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path d="M3 9l9-7 9 7v11a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
                  <polyline points="9,22 9,12 15,12 15,22" />
                </svg>
                Tableau de Bord
              </a>
            </div>
          </div>
        </div>
        <% } %>
      </div>
    </main>

    <!-- Report Modal -->
    <div id="reportModal" class="quiz-modal hidden">
      <div class="quiz-modal-container">
        <div class="report-modal">
          <div class="report-header">
            <h3 class="report-title">
              <span id="reportTitle">HTML Fundamentals</span>
            </h3>
            <p class="report-description">
              Detailed breakdown of your performance
            </p>
          </div>

          <div class="report-content">
            <div class="report-stats">
              <div class="report-stat">
                <div id="reportPercentage" class="report-percentage">67%</div>
                <div class="report-stat-label">Final Score</div>
              </div>
              <div class="report-stat">
                <div id="reportCorrect" class="report-stat-number correct">2</div>
                <div class="report-stat-label">Correct</div>
              </div>
              <div class="report-stat">
                <div id="reportIncorrect" class="report-stat-number incorrect">
                  1
                </div>
                <div class="report-stat-label">Incorrect</div>
              </div>
            </div>

            <div class="report-questions">
              <h4 class="report-section-title">Question Review</h4>
              <div id="questionReview">
                <!-- Questions will be dynamically generated -->
              </div>
            </div>
          </div>

          <div class="report-close-button">
            <button class="button" onclick="closeReport()">Close Report</button>
          </div>
        </div>
      </div>
    </div>

    <script>

      let selectedAnswer = null;
  let totalScore = 0;
  let userSelectedAnswers = []; 
  const questions = <%- JSON.stringify(questions) %>;
  let currentQuestionIndex = <%= currentQuestion %>;
  const thematique_id = '<%= theme.id %>';

  // Select answer
  function selectAnswer(index) {
    selectedAnswer = index;
    document.getElementById('sbtBtn').disabled = false;

    // Highlight selected
    document.querySelectorAll('.quiz-option-card').forEach(card => card.classList.remove('selected'));
    document.querySelector(`.quiz-option-card[data-index="${index}"]`).classList.add('selected');
  };


  let isLastQuestion = currentQuestionIndex === questions.length - 1;
  // Submit answer
async function handleSubmit() {
  console.log('currentQuestionIndex:', currentQuestionIndex);
  // if (selectedAnswer === null) return;
  const questionId = questions[currentQuestionIndex].id;
  const options = Array.isArray(questions[currentQuestionIndex].options)
    ? questions[currentQuestionIndex].options
    : JSON.parse(questions[currentQuestionIndex].options || "[]");

      
  // const selectedAnswerText = options[selectedAnswer];
  const selectedAnswerText = selectedAnswer !== null ? options[selectedAnswer] : "no answer";
  userSelectedAnswers[currentQuestionIndex] = selectedAnswerText;

  isLastQuestion = currentQuestionIndex === questions.length - 1;

  const response = await fetch(`/users/submit-answer`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      questionId,
      selectedAnswer: selectedAnswerText,
      isLastQuestion,
      totalScore,
      thematique_id
    }),
  });

  if (!response.ok) {
    alert('Une erreur est survenue lors de la soumission.');
    return;
  }

  
const data = await response.json(); // Read once
totalScore = data.totalScore;
const isCorrect = data.correct;

  document.querySelectorAll('.quiz-option-card').forEach(card => {
    const index = parseInt(card.dataset.index, 10);
    if (index === selectedAnswer) {
      if (isCorrect) {
        card.classList.add('correct');
      } else {
        card.classList.add('incorrect');
        correctAnswerText = questions[currentQuestionIndex].correct_answers;
         const correctArray = JSON.parse(correctAnswerText);
        correctAnswerText = correctArray[0];

        

        const options = document.querySelectorAll('.quiz-option-text');
        const correctIndex = Array.from(options).findIndex(opt => opt.textContent === correctAnswerText);
        console.log('Correct answer text:', correctAnswerText, 'Correct index:', correctIndex);
        if (correctIndex !== -1) {
          document.querySelector(`.quiz-option-card[data-index="${correctIndex}"]`).classList.add('correct');
        }
      }
    }
    if (selectedAnswer != null) {
      card.onclick = null; // Disable further clicks

    }
  });

  currentQuestionIndex += 1;
  document.getElementById('sbtBtn').disabled = true;


}
function displayNextQuestion() {
  document.getElementById('sbtBtn').disabled = false;

  const question = questions[currentQuestionIndex];
  document.getElementById('questionNumber').textContent = currentQuestionIndex + 1;
  document.getElementById('questionText').textContent = question.question;

  const optionsContainer = document.getElementById('answerOptions');
  optionsContainer.innerHTML = '';

  const options = Array.isArray(question.options)
    ? question.options
    : JSON.parse(question.options || '[]');

  options.forEach((option, index) => {
    const div = document.createElement('div');
    div.className = 'quiz-option-card';
    div.dataset.index = index;
    div.innerHTML = `
      <div class="quiz-option-content">
        <div class="quiz-option-indicator">${String.fromCharCode(65 + index)}</div>
        <span class="quiz-option-text">${option}</span>
      </div>
    `;
    div.onclick = () => selectAnswer(index);
    optionsContainer.appendChild(div);
  });

  selectedAnswer = null;
  document.getElementById('sbtBtn').disabled = true;

  if (currentQuestionIndex === questions.length - 1) {
    document.getElementById('nextBtn').textContent = 'View Report';
  } else {
    document.getElementById('nextBtn').textContent = 'Next Question';
  }
}

async function handleNext() {
  if (currentQuestionIndex >= questions.length) {
    showReport();
    return;
  }

  // If no answer selected, submit as "no answer"
  if (selectedAnswer === null) {
    await handleSubmit();
  }

  // Only display next question if we haven't reached the end
  if (currentQuestionIndex < questions.length) {
    displayNextQuestion();
  } else {
    showReport();
  }
}

function showReport() {
  document.getElementById('reportModal').classList.remove('hidden');
//  document.querySelector('.quiz-main-content').classList.add('hidden');

  // document.body.style.overflow = 'hidden'; // Disable background scrolling
  const totalQuestions = questions.length;
  const correctAnswers = totalScore / 10; // Assuming each correct answer gives 10 points
  const incorrectAnswers = totalQuestions - correctAnswers;
  const percentage = Math.round((correctAnswers / totalQuestions) * 100);
  document.getElementById('reportPercentage').textContent = `${percentage}%`;
  document.getElementById('reportCorrect').textContent = correctAnswers;
  document.getElementById('reportIncorrect').textContent = incorrectAnswers;
  document.getElementById('reportTitle').textContent = '<%= theme.name %>';
  const questionReview = document.getElementById('questionReview');
  questionReview.innerHTML = '';
    questions.forEach((q, idx) => {
    const options = Array.isArray(q.options) ? q.options : JSON.parse(q.options || '[]');
    const userAnswer = userSelectedAnswers[idx] || "no answer"; // ✅ use array
    const correctAnswer = Array.isArray(q.correct_answers) ? q.correct_answers[0] : JSON.parse(q.correct_answers || '[]')[0];
    const isCorrect = userAnswer === correctAnswer;

    const questionDiv = document.createElement('div');
    questionDiv.className = 'report-question';
    questionDiv.innerHTML = `
      <h5 class="report-question-text">Q${idx + 1}: ${q.question}</h5>
      <p class="report-user-answer ${isCorrect ? 'correct' : 'incorrect'}">
        Your Answer: ${userAnswer}
      </p>
      <p class="report-correct-answer">
        Correct Answer: ${correctAnswer}
      </p>
    `;
    questionReview.appendChild(questionDiv);
  });
}
function closeReport() {
  document.getElementById('reportModal').classList.add('hidden');
  window.location.href = '/quiz/list';
  // document.querySelector('.quiz-main-content').classList.remove('hidden');
  // document.body.style.overflow = 'auto'; // Re-enable background scrolling
}
    </script>

